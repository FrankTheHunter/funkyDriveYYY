resource_types:
  - name: kpack-image
    type: registry-image
    source:
      repository: gcr.io/cf-build-service-public/concourse-kpack-resource
      tag: "1.0"

resources:
  - name: kotlin-ktor-starter-image
    type: registry-image
    source:
      repository: registry.${REGISTRY_DOMAIN}/kpack/kotlin-ktor-starter

  - name: fresch-cloud-source-code
    type: git
    source:
      uri: https://github.com/initialcapacity/freshcloud
      branch: main

  - name: kotlin-ktor-starter-source-code
    type: git
    source:
      uri: https://github.com/initialcapacity/kotlin-ktor-starter
      branch: main

  - name: kotlin-ktor-starter-build-service
    type: kpack-image
    source:
      image: kotlin-ktor-starter-image
      namespace: kotlin-ktor-starter
      gke:
        json_key: ((service-account-key))
        kubeconfig: ((kubeconfig))

  - name: kubernetes-task-image
    type: registry-image
    source:
      repository: registry.${REGISTRY_DOMAIN}/concourse-images/cluster-mgmt
      tag: latest

jobs:
  - name: vulnerability-scan
    plan:
      - task: sleep
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ubuntu
              tag: bionic
          run:
            path: /bin/sleep
            args: [ 5s ]
      - in_parallel:
          - get: kotlin-ktor-starter-source-code
          - get: kotlin-ktor-starter-build-service
            trigger: true
            passed: [ build-kotlin-ktor-starter-image ]
          - get: kotlin-ktor-starter-image
      - task: trivy-fs
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: aquasec/trivy
          inputs:
            - name: kotlin-ktor-starter-image
          caches:
            - path: trivy-cache
          run:
            path: sh
            args:
              - -cex
              - |
                trivy --cache-dir trivy-cache fs --severity HIGH,CRITICAL --vuln-type library,os --ignore-unfixed --exit-code 0 kotlin-ktor-starter-image/rootfs
  - name: build-kotlin-ktor-starter-image
    plan:
      - get: kotlin-ktor-starter-source-code
        trigger: true
      - put: kotlin-ktor-starter-build-service
        params:
          commitish: kotlin-ktor-starter-source-code/.git/ref

  - name: deploy-kotlin-ktor-starter
    plan:
      - get: fresch-cloud-source-code
      - get: kotlin-ktor-starter-source-code
      - get: kotlin-ktor-starter-build-service
        passed:
          - vulnerability-scan
        trigger: true
      - get: kubernetes-task-image
      - task: deploy-kubernetes
        image: kubernetes-task-image
        config:
          platform: linux
          inputs:
            - name: fresch-cloud-source-code
            - name: kotlin-ktor-starter-source-code
          params:
            KUBECONFIG: ((kubeconfig))
            DOMAIN: ((domain))
            K8S_CLUSTER_NAME: ((cluster_name))
            K8S_SERVICE_ACCOUNT_JSON: ((service_account_json))
          run:
            path: sh
            args:
            - -sc
            - |
              echo "${DOLLAR}KUBECONFIG" > config.yml
              export KUBECONFIG=config.yml
              export IMAGE=$(kubectl get image kotlin-ktor-starter-image -n kotlin-ktor-starter -o jsonpath="{.status.latestImage}")
              envsubst < ./kotlin-ktor-starter-source-code/deployments/basic-server.yaml > basic-server.yaml
              unset KUBECONFIG

              export cred_file=$(mktemp)
              trap "rm ${cred_file}" EXIT
              echo "${DOLLAR}{K8S_SERVICE_ACCOUNT_JSON}" > ${DOLLAR}{cred_file}
              chmod 600 ${DOLLAR}{cred_file}
              gcloud auth login --cred-file "${DOLLAR}{cred_file}" --quiet
              gcloud container clusters get-credentials ${DOLLAR}{K8S_CLUSTER_NAME} --zone ${GCP_ZONE} --project ${GCP_PROJECT_ID}
              kubectl create namespace kotlin-ktor-starter
              kubectl apply -f basic-server.yaml

              echo "todo - use freshclt"
              cd ./fresch-cloud-source-code/
              go mod download && go mod verify
              go run cmd/freshctl.go
              if [ $? != 0 ]; then
                echo "oops, failed to deploy."
                exit 1
              fi